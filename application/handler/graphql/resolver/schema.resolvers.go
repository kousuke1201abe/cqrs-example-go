package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"

	"github.com/giftee/cqrs-example-go/application/domain/model/coupon"
	"github.com/giftee/cqrs-example-go/application/domain/model/promotion"
	"github.com/giftee/cqrs-example-go/application/handler/graphql/generated"
	"github.com/giftee/cqrs-example-go/application/handler/graphql/model"
	"github.com/google/uuid"
)

// SubmitPromotion is the resolver for the submitPromotion field.
func (r *mutationResolver) SubmitPromotion(ctx context.Context, input model.SubmitPromotionInput) (*model.SubmitPromotionPayload, error) {
	name, err := promotion.NewName(input.Name)
	if err != nil {
		return nil, err
	}

	discount, err := promotion.NewDiscount(input.DiscountAmount)
	if err != nil {
		return nil, err
	}

	slot, err := promotion.NewSlot(input.SlotRemainingAmount)
	if err != nil {
		return nil, err
	}

	event, err := r.SubmitPromotionCommand.Exec(ctx, name, discount, slot)
	if err != nil {
		return nil, err
	}

	return &model.SubmitPromotionPayload{PromotionID: event.AggregateID.String()}, nil
}

// PublishPromotion is the resolver for the publishPromotion field.
func (r *mutationResolver) PublishPromotion(ctx context.Context, input model.PublishPromotionInput) (*model.PublishPromotionPayload, error) {
	promotionID, err := uuid.Parse(input.PromotionID)
	if err != nil {
		return nil, err
	}

	event, err := r.PublishPromotionCommand.Exec(ctx, promotionID)
	if err != nil {
		return nil, err
	}

	return &model.PublishPromotionPayload{PromotionID: event.AggregateID.String()}, nil
}

// ApplyPromotion is the resolver for the applyPromotion field.
func (r *mutationResolver) ApplyPromotion(ctx context.Context, input model.ApplyPromotionInput) (*model.ApplyPromotionPayload, error) {
	promotionID, err := uuid.Parse(input.PromotionID)
	if err != nil {
		return nil, err
	}

	customerID, err := uuid.Parse(input.CustomerID)
	if err != nil {
		return nil, err
	}

	event, err := r.ApplyPromotionCommand.Exec(ctx, promotionID, customerID)
	if err != nil {
		return nil, err
	}

	return &model.ApplyPromotionPayload{PromotionID: event.AggregateID.String()}, nil
}

// GrantCoupon is the resolver for the grantCoupon field.
func (r *mutationResolver) GrantCoupon(ctx context.Context, input model.GrantCouponInput) (*model.GrantCouponPayload, error) {
	customerID, err := uuid.Parse(input.CustomerID)
	if err != nil {
		return nil, err
	}

	discount, err := coupon.NewDiscount(input.DiscountAmount)
	if err != nil {
		return nil, err
	}

	event, err := r.GrantCouponCommand.Exec(ctx, customerID, discount)
	if err != nil {
		return nil, err
	}

	return &model.GrantCouponPayload{CouponID: event.AggregateID.String()}, nil
}

// InvalidateCoupon is the resolver for the invalidateCoupon field.
func (r *mutationResolver) InvalidateCoupon(ctx context.Context, input model.InvalidateCouponInput) (*model.InvalidateCouponPayload, error) {
	couponID, err := uuid.Parse(input.CouponID)
	if err != nil {
		return nil, err
	}

	event, err := r.InvalidateCouponCommand.Exec(ctx, couponID)
	if err != nil {
		return nil, err
	}

	return &model.InvalidateCouponPayload{CouponID: event.AggregateID.String()}, nil
}

// Coupons is the resolver for the coupons field.
func (r *queryResolver) Coupons(ctx context.Context, customerID string) ([]*model.Coupon, error) {
	results, err := r.CouponQueryService.QueryByCustomerID(ctx, customerID)
	if err != nil {
		return nil, err
	}

	coupons := make([]*model.Coupon, 0, len(results))
	for _, result := range results {
		coupons = append(coupons, &model.Coupon{
			ID:             result.ID,
			DiscountAmount: result.DiscountAmount,
			ExpiresAt:      result.ExpiredAt,
			Invalidated:    result.Invalidated,
			Redeemed:       result.Redeemed,
		})
	}

	return coupons, nil
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context) ([]*model.Customer, error) {
	results, err := r.CustomerQueryService.QueryAll(ctx)
	if err != nil {
		return nil, err
	}

	customers := make([]*model.Customer, 0, len(results))
	for _, result := range results {
		customers = append(customers, &model.Customer{ID: result.ID})
	}

	return customers, nil
}

// Promotions is the resolver for the promotions field.
func (r *queryResolver) Promotions(ctx context.Context) ([]*model.Promotion, error) {
	results, err := r.PromotionQueryService.QueryAll(ctx)
	if err != nil {
		return nil, err
	}

	promotions := make([]*model.Promotion, 0, len(results))
	for _, result := range results {
		promotions = append(promotions, &model.Promotion{
			ID:                    result.ID,
			Name:                  result.Name,
			DiscountAmount:        result.DiscountAmount,
			SlotRemainingAmount:   result.SlotRemainingAmount,
			Published:             result.Published,
			AppliedCustomerNumber: result.AppliedCustomerNumber,
		})
	}

	return promotions, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
